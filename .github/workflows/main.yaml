name: Build

env:
  REGISTRY: ghcr.io
  BACKEND_IMAGE_NAME: ${{ github.repository_owner }}/backend

on:
  workflow_dispatch:
  push:
    tags:
      - 'v*'

jobs:
  build-maven:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: 21

      - name: Cache local Maven repository
        uses: actions/cache@v4
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven
            
      - name: Build with Maven
        run: mvn -B install --file pom.xml -DskipTests

      # - name: Upload target
      #   uses: actions/upload-artifact@v4
      #   with:
      #     name: build_artifacts
      #     path: |
      #       backend/target/
      #       backend/Dockerfile

  release:
    needs: build-maven
    runs-on: ubuntu-latest
    permissions:
      contents: write       # to be able to publish a GitHub release
      issues: write         # to be able to comment on released issues
      pull-requests: write  # to be able to comment on released pull requests
      id-token: write       # to enable use of OIDC for npm provenance
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-node@v3
        with:
          cache: npm
          node-version: "lts/*"
      - run: npm clean-install
      - name: Release
        env:
          TARGET_PATH: "./backend"
          GITHUB_TOKEN: ${{ secrets.GH_TOKEN_TRG }}
        run: npx semantic-release

  build-and-push-backend-image:  # https://docs.github.com/en/actions/use-cases-and-examples/publishing-packages/publishing-docker-images
    if: false
    needs: build-maven
    runs-on: ubuntu-latest

    permissions:
      contents: read
      packages: write
      attestations: write
      id-token: write

    steps:
      # - uses: actions/checkout@v4
      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          name: build_artifacts

      - name: Log in to the Container registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.BACKEND_IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=tag
            type=raw,value=latest,enable={{is_default_branch}}
            type=semver,pattern={{version}},value=${{ steps.semantic.outputs.new_release_version }}
            type=semver,pattern={{major}},value=${{ steps.semantic.outputs.new_release_major_version }},enable=${{ !startsWith(github.ref, 'refs/tags/v0.') }}
            type=semver,pattern={{major}}.{{minor}},value=${{ steps.semantic.outputs.new_release_major_version }}.${{ steps.semantic.outputs.new_release_patch_version }}

      - name: Build and push Docker image
        id: push
        uses: docker/build-push-action@v6
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

      - name: Generate artifact attestation
        uses: actions/attest-build-provenance@v2
        with:
          subject-name: ${{ env.REGISTRY }}/${{ env.BACKEND_IMAGE_NAME}}
          subject-digest: ${{ steps.push.outputs.digest }}
          push-to-registry: true

